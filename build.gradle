plugins {
    id 'java'
    id 'war'
    id 'io.freefair.lombok' version '8.2.2'
    id 'io.freefair.aspectj.post-compile-weaving' version '8.3'
    id 'nu.studer.jooq' version '8.2'
    id 'org.liquibase.gradle' version '2.2.0'
}

group 'ru.clevertec'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    servletVersion = '6.0.0'
    postgresqlVersion = '42.6.0'
    gsonVersion = '2.10.1'
    slf4jVersion = '2.0.7'
    logbackVersion = '1.4.11'
    snakeYamlVersion = '2.1'
    liquibaseVersion = '4.23.1'
    mapstructVersion = '1.5.3.Final'
    aspectjVersion = '1.9.20'
    jooqVersion = '3.18.6'
    picocliVersion = '4.7.5'
    junitVersion = '5.10.0'
    assertjVersion = '3.24.2'
    mockitoVersion = '5.5.0'
}

sourceCompatibility = targetCompatibility = '17'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly "jakarta.servlet:jakarta.servlet-api:${servletVersion}"

    jooqGenerator "org.postgresql:postgresql:${postgresqlVersion}"

    liquibaseRuntime "org.liquibase:liquibase-core:$liquibaseVersion"
    liquibaseRuntime "info.picocli:picocli:$picocliVersion"
    liquibaseRuntime "org.postgresql:postgresql:$postgresqlVersion"

    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"
    runtimeOnly "org.aspectj:aspectjrt:${aspectjVersion}"
    runtimeOnly "org.aspectj:aspectjweaver:${aspectjVersion}"

    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "org.yaml:snakeyaml:${snakeYamlVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.aspectj:aspectjtools:${aspectjVersion}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

liquibase {
    activities {
        createTables {
            changelogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
            driver 'org.postgresql.Driver'
            url 'jdbc:postgresql://localhost:5432/clever_bank'
            username 'pavel'
            password 'pavel'
        }
    }
}

jooq {
    version = "${jooqVersion}"
    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/clever_bank'
                    user = 'pavel'
                    password = 'pavel'
                }
                generator {
                    database {
                        inputSchema = 'public'
                        excludes = 'databasechangelog|databasechangeloglock'
                    }
                    generate {
                        pojosEqualsAndHashCode = true
                        relations = true
                        deprecated = false
                        records = true
                        pojos = true
                        immutablePojos = false
                        fluentSetters = true
                    }
                    target {
                        packageName = 'ru.clevertec.cleverbank'
                        directory = 'build/generated/sources/jooq/main'
                    }
                }
            }
        }
    }
}

generateJooq.dependsOn(update)

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
    options.compilerArgs += [
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

test {
    useJUnitPlatform()
}
